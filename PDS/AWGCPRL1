*---------------------------------------------------------------------*
* Name:          AWGCPRL1
* Author:        Nolan Young <nyoung@awginc.com>
* Date:          Originally written in 1997.
* Installation:  Associated Wholesale Grocers, Kansas City, KS
* Attributes:    Non-reentrant, authorized.
* Function:      Compares pairs of load modules.
* Limitations:   (1) If module to be compared is non-executable,
*                abend S706-4 will occur on LOAD SVC.
*                (2) Must be authorized because of ADRNAPF parm of
*                LOAD SVC.
* Technique:     Loads both modules into memory and compares them with
*                CLCL instruction.  If modules are of unequal length,
*                no comparison is done.
* Options:       Saying PARM=SNAP will snap-dump modules that are
*                unequal (so you can look at them).
* Input:         If only one member name is specified, that member
*                is loaded from both LIB1 and LIB2.
* Misc.:         I have written another program which compares entire
*                load libraries.  It is a separate module and needs
*                more work.
*
* Maint:
* 10/13/2005     Changed first GETMAIN to LOC=ANY.
*
* //COMPARE  EXEC PGM=AWGCPRL1  ,PARM=SNAP
* //STEPLIB   DD DSN=#TNRY.LOAD,DISP=SHR <== MUST BE AUTHORIZED
* //REPORT    DD SYSOUT=*
* //SNAP      DD SYSOUT=*,OUTLIM=50000
* //LIB1      DD DISP=SHR,DSN=#TNRY.LOAD.BLK27998
* //LIB2      DD DISP=SHR,DSN=#TNRY.LOAD.BLK6144
* //INPUT     DD *
* MEMBER
* MEMBERA1 MEMBERA2
* //
*
*---------------------------------------------------------------------*
         MACRO                                                          00001
&LABEL   ENTER &USER=12,&SAVE=SAVE                                      00002
         LCLB  &SW                                                      00003
         AGO   .EDUSER                                                  00004
.RETUS   ANOP                                                           00005
         AIF   (&SW).END                                                00008
&LABEL   CSECT                                                          00009
         B     28(0,15)           BRANCH AROUND IDENTIFIERS
         DC    CL8'&LABEL'        CSECT NAME
         DC    CL8'&SYSDATC'      ASSEMBLY DATE
         DC    CL8'&SYSTIME'      ASSEMBLY TIME
         SAVE  (14,12)            SAVE CALLER'S REGS                    00010
         LR    &USER,15           LOAD BASE REG WITH ENTRY POINT        00011
         USING &LABEL,&USER       ESTABLISH ADDRESSABILITY              00012
         CNOP  0,4                ALIGN NEXT INSTRUCTION & SAVE AREA
         B     *+76               BRANCH AROUND SAVE AREA
&SAVE    DC    18F'0'             MY SAVE AREA
         LR    15,13              CALLER'S SAVE AREA ADDR
         LA    13,&SAVE           MY SAVE AREA ADDR
         ST    15,4(,13)          CALLER'S SAVEAREA ADDR IN MY HSA
         ST    13,8(,15)          MY SAVEAREA ADDR IN CALLER'S LSA
         AGO   .END                                                     00019
.EDUSER  ANOP                                                           00020
         AIF   (T'&USER NE 'N').USERROR                                 00021
         AIF   (&USER LT 2 OR &USER GT 12).USERROR                      00022
         AGO   .RETUS                                                   00023
.USERROR ANOP                                                           00024
         MNOTE 8,'BASE REGISTER MUST BE A NUMBER BETWEEN 2 AND 12'      00025
&SW      SETB  1                                                        00026
         AGO   .RETUS                                                   00027
.END     ANOP                                                           00034
         MEND                                                           00035
*
         EJECT
         YREGS                    REGISTER EQUATES
AWGCPRL1 AMODE 31
AWGCPRL1 RMODE 24
AWGCPRL1 ENTER                    STANDARD OS HOUSEKEEPING
*---------------------------------------------------------------------*
* GET EXEC PARM (IF ANY).
*---------------------------------------------------------------------*
GET_PARM DS    0H
         L     R3,0(,R1)          PARM ADDRESS
         XR    R4,R4              CLEAR R4
         LH    R4,0(,R3)          PARM LENGTH
         LTR   R4,R4              NO PARM SPECIFIED?
         BZ    NOPARM             YES, BYPASS
         STH   R4,PARMLEN         PARM LENGTH
         BCTR  R4,R0              SUBTRACT ONE FOR EX
         EX    R4,MOVEPARM        MOVE PARM TO FIELD
         B     OPEN_FILES         CONTINUE
*
MOVEPARM MVC   PARMTEXT(0),2(R3)  USED BY EX
*
NOPARM     DS  0H
OPEN_FILES DS  0H
*---------------------------------------------------------------------*
* OPEN FILES.
*---------------------------------------------------------------------*
         OPEN  (PDS1DCB,INPUT,PDS2DCB,INPUT)
         OPEN  (INPUTDCB,INPUT,RPTDCB,OUTPUT)
         OPEN  (SNAPDCB,OUTPUT)
*---------------------------------------------------------------------*
* READ DATA RECORDS.
*---------------------------------------------------------------------*
GET_INPUT  DS  0H
         MVC   MOD1_NAME,=CL8' '  BLANK WORK FIELD
         MVC   MOD2_NAME,=CL8' '  BLANK WORK FIELD
         GET   INPUTDCB           GET NEXT INPUT RECORD
         LR    R3,R1              RECORD ADDRESS
         CLI   0(R3),C' '         FIRST BYTE = BLANK?
         BE    BLANK_1ST_COL
         XC    TRTTBL,TRTTBL      CLEAR OUT TRANSLATE TABLE
         MVI   TRTTBL+64,X'FF'    SET UP TO SCAN FOR BLANK
         TRT   0(72,R3),TRTTBL    SCAN
         BC    6,GOT_MOD1         FOUND IT
         B     BAD_MOD1_NAME      NOT FOUND, EXIT
GOT_MOD1 DS    0H
         LR    R15,R1             SAVE ADDR OF BLANK
         SR    R15,R3             (BLANK ADDR) - BEGIN = WORD LEN
         LTR   R15,R15            LEN = 0?
         BZ    BAD_MOD1_NAME      YES, ERROR
         CH    R15,=H'8'          WORD LEN > 8?
         BH    BAD_MOD1_NAME      YES, ERROR
         BCTR  R15,R0             SUBTRACT 1 FOR EX INSTRUCTION
         EX    R15,MOVE_MOD1      MOVE TO WORK FIELD
         B     GET_MOD2
MOVE_MOD1 MVC  MOD1_NAME(0),0(R3) USED BY EX
GET_MOD2  DS   0H
         LA    R4,1(,R1)          POINT PAST BLANK
         TRT   0(63,R4),TRTTBL   SCAN FOR NEXT BLANK
         BC    6,GOT_MOD2         FOUND IT
         MVC   MOD2_NAME,MOD1_NAME  MOD2 = MOD1
         B     END_SCAN           PROCEED
GOT_MOD2 DS    0H
         CR    R1,R4              LEN > 0?
         BH    GET_MOD2_NAME_LEN  YES, GET LENGTH OF MOD2 NAME
         MVC   MOD2_NAME,MOD1_NAME  NO, MOD2 MISSING; MAKE = TO MOD1
         B     END_SCAN
GET_MOD2_NAME_LEN DS  0H
         SR    R1,R4              (BLANK ADDR) - BEGIN = WORD LEN
         LTR   R1,R1              LEN > 0?
         CH    R1,=H'8'           WORD LEN > 8?
         BH    BAD_MOD2_NAME      YES, EXIT
         BCTR  R1,R0              SUBTRACT 1 FOR EX INSTRUCTION
         EX    R1,MOVE_MOD2_NAME  MOVE TO WORK FIELD
         B     END_SCAN
MOVE_MOD2_NAME MVC  MOD2_NAME(0),0(R4) USED BY EX
END_SCAN DS    0H
         BAL   R14,COMPARE_MODS   PERFORM COMPARE
         B     GET_INPUT          NEXT INPUT RECORD
BLANK_1ST_COL  DS    0H
         MVC   PRTLINE(L'MSG6),MSG6   MOVE MSG
         BAL   R11,PRINT          PERFORM PRINT
         B     GET_INPUT          NEXT INPUT RECORD
BAD_MOD1_NAME DS 0H
         MVC   PRTLINE(80),0(R3)  MOVE RECORD TO PRINT LINE
         MVC   MSG1(3),=C'1ST'
         MVC   PRTLINE+80(L'MSG1),MSG1   MOVE MSG
         BAL   R11,PRINT          PRINT
         B     GET_INPUT          NEXT RECORD
BAD_MOD2_NAME DS 0H
         MVC   PRTLINE(80),0(R3)  MOVE RECORD TO PRINT LINE
         MVC   MSG1(3),=C'2ND'
         MVC   PRTLINE+80(L'MSG1),MSG1   MOVE MSG
         BAL   R11,PRINT          PRINT
         B     GET_INPUT          NEXT RECORD
*----------------------------------------------------------------------
COMPARE_MODS DS  0H
         ST    R14,COMPARE_MODS_SAVE   SAVE RETURN ADDR
         LA    R9,BLDL_NAME       ADDR OF BLDL NAME
         USING PDS2,R9            PDS ENTRY DSECT
BLDL_MOD1 DS   0H
         MVC   BLDL_NAME,MOD1_NAME  MOVE BLDL NAME FROM INPUT
         BLDL  PDS1DCB,BLDL_LIST
         LTR   R15,R15            MEMBER FOUND?
         BP    MOD1_BLDL_FAILED   YES, BRANCH
         XR    R5,R5              CLEAR REG
         ICM   R5,B'0111',PDS2STOR  MOVE LOW 3 BYTES
         ST    R5,MOD1_SIZE       SAVE MODULE SIZE
BLDL_MOD2 DS   0H
         MVC   BLDL_NAME,MOD2_NAME  MOVE BLDL NAME FROM INPUT
         BLDL  PDS2DCB,BLDL_LIST
         LTR   R15,R15            MEMBER FOUND?
         BP    MOD2_BLDL_FAILED   YES, BRANCH
         XR    R5,R5              CLEAR REG
         ICM   R5,B'0111',PDS2STOR  MOVE LOW 3 BYTES
         ST    R5,MOD2_SIZE       SAVE MODULE SIZE
*
         CLC   MOD1_SIZE,MOD2_SIZE SAME SIZE AS MOD1?
         BNE   LENGTHS_UNEQUAL    NO, DON'T PROCEED
*        GETMAIN RU,LV=(R5),LOC=BELOW,BNDRY=PAGE
         GETMAIN RU,LV=(R5),LOC=ANY,BNDRY=PAGE
         ST    R1,AMODAREA        STG ADDR
         GETMAIN RU,LV=(R5),LOC=ANY,BNDRY=PAGE
         ST    R1,AMODSAVE        STG ADDR
         L     R2,AMODAREA        ADDR FOR LOAD OF MODULE
         MODESET MODE=SUP         REQUIRED BY ADRNAPF LOAD PARM
         LOAD  EPLOC=MOD1_NAME,DCB=PDS1DCB,ADRNAPF=(R2)
         MODESET MODE=PROB        RETURN TO PROBLEM STATE
         L     R6,AMODAREA        ADDRESS OF MOD FROM LIB1
         LR    R7,R5              LENGTH FOR 2ND MVCL OPERAND
         L     R4,AMODSAVE        SAVED MOD AREA ADDRESS
         MVCL  R4,R6              MOVE MOD1 TO SAVED AREA
         BC    8,MVCL_CC0
* ABEND IF UNEXPECTED CC FROM MVCL.
         BC    4,MVCL_CC1
         BC    2,MVCL_CC2
         BC    1,MVCL_CC3
MVCL_CC1 ABEND 1,DUMP
MVCL_CC2 ABEND 2,DUMP
MVCL_CC3 ABEND 3,DUMP
*
MVCL_CC0 DS    0H
         LTR   R5,R5              R5=0 (ALL BYTES MOVED)?
         BZ    TEST_R7            YES
         SNAP  DCB=SNAPDCB,PDATA=(REGS,JPA,SPLS),ID=5
TEST_R7  LTR   R7,R7              R7=0 (ALL BYTES MOVED)?
         BZ    MVCL_END           YES
         SNAP  DCB=SNAPDCB,PDATA=(REGS,JPA,SPLS),ID=7
MVCL_END DS    0H
*
LOAD_2   DS    0H
         MODESET MODE=SUP         REQUIRED BY ADRNAPF LOAD PARM
         LOAD  EPLOC=MOD2_NAME,DCB=PDS2DCB,ADRNAPF=(R2)
         MODESET MODE=PROB        RETURN TO PROBLEM STATE
         L     R4,AMODSAVE        ADDR OF COPY OF MOD1
         L     R6,AMODAREA        ADDR OF MOD2
         L     R5,MOD1_SIZE       RESTORE MOD1 LENGTH
         LR    R7,R5              LENGTH FOR 2ND CLCL OPERAND
         CLCL  R4,R6              COMPARE MODULES
         BNE   UNEQUAL            IF UNEQUAL, BRANCH
         MVC   MSG3_MOD1_NAME,MOD1_NAME
         MVC   MSG3_MOD2_NAME,MOD2_NAME
         MVC   PRTLINE(MSG3_LEN),MSG3   MOVE EQUAL MSG
         BAL   R11,PRINT          PRINT
         B     FREE_WORK_AREAS
MOD1_BLDL_FAILED  DS  0H
         MVC   MSG7_MOD,MOD1_NAME  MOVE MOD NAME TO MSG
         MVI   MSG7_LIB,C'1'       MOVE LIB # TO MSG
         MVC   PRTLINE(MSG7_LEN),MSG7   MOVE MSG
         BAL   R11,PRINT           PRINT
         MVC   RETURN_CODE,=H'4'   SET RETURN CODE
         B     COMPARE_MODS_END
MOD2_BLDL_FAILED  DS  0H
         MVC   MSG7_MOD,MOD2_NAME  MOVE MOD NAME TO MSG
         MVI   MSG7_LIB,C'2'       MOVE LIB # TO MSG
         MVC   PRTLINE(MSG7_LEN),MSG7   MOVE MSG
         BAL   R11,PRINT PRINT     PRINT
         MVC   RETURN_CODE,=H'4'   SET RETURN CODE
         B     COMPARE_MODS_END
UNEQUAL  DS    0H
*---------------------------------------------------------------------*
* CALCULATE OFFSET OF NON-MATCH AND CONVERT IT TO DISPLAYABLE HEX.
*---------------------------------------------------------------------*
         L     R8,AMODSAVE        ADDR OF MOD SAVE
         SR    R4,R8              GET OFFSET OF UNEQUAL BYTE
         ST    R4,FULLWORD        SAVE IN DATA FLD
         UNPK  WORKHEX,FULLWORD(5)  UNPACK HEX FLD
         LA    R15,HEXTBL         POINT TO...
         SH    R15,=H'240'          TRANSLATE TABLE
         TR    WORKHEX(8),0(R15)  CONVERT TO DISPLAY HEX
         MVC   MSG4_MOD1_NAME,MOD1_NAME
         MVC   MSG4_MOD2_NAME,MOD2_NAME
         MVC   MSG4_OFFS,WORKHEX   MOVE TO DISPLAY FLD
         MVC   PRTLINE(MSG4_LEN),MSG4  MOVE MSG
         BAL   R11,PRINT           PRINT
         MVC   RETURN_CODE,=H'8'   SET RETURN CODE
*---------------------------------------------------------------------*
* SNAP, IF DESIRED, TO SEE MODULES.
*---------------------------------------------------------------------*
         CLC   =C'SNAP',PARMTEXT  SNAP REQUESTED IN EXEC PARM?
         BNE   SNAP_END           NO, SKIP
         L     R4,AMODSAVE        ADDR OF COPY OF MOD1
         LR    R5,R4              ALSO IN R5
         A     R5,MOD1_SIZE       ADD SIZE OF MOD
         L     R15,SNAP_NUM       SNAP NUMBER
         LA    R15,1(,R15)        ADD 1 TO SNAP NUMBER
         ST    R15,SNAP_NUM       SAVE
         SNAP  DCB=SNAPDCB,PDATA=(REGS),ID=(R15),                      +
               STORAGE=((R4),(R5))
         L     R6,AMODAREA        ADDR OF MOD1
         LR    R7,R6              ALSO IN R7
         A     R7,MOD1_SIZE       ADD SIZE OF MOD
         L     R15,SNAP_NUM       SNAP NUMBER
         LA    R15,1(,R15)        ADD 1 TO SNAP NUMBER
         ST    R15,SNAP_NUM       SAVE
         SNAP  DCB=SNAPDCB,PDATA=(REGS),ID=(R15),                      +
               STORAGE=((R6),(R7))
*
SNAP_END DS    0H
         B     FREE_WORK_AREAS
*
LENGTHS_UNEQUAL  DS  0H
         MVC   MSG2_MOD1_NAME,MOD1_NAME  MOVE TO MSG FLD
         MVC   MSG2_MOD2_NAME,MOD2_NAME  MOVE TO MSG FLD
         UNPK  WORKHEX,MOD1_SIZE(5) UNPACK HEX FLD
         LA    R15,HEXTBL         POINT TO...
         SH    R15,=H'240'          TRANSLATE TABLE
         TR    WORKHEX(8),0(R15)  CONVERT TO DISPLAY HEX
         MVC   MSG2_MOD1_SIZE,WORKHEX  MOVE TO DISPLAY FLD
*
         UNPK  WORKHEX,MOD2_SIZE(5) UNPACK HEX FLD
         LA    R15,HEXTBL         POINT TO...
         SH    R15,=H'240'          TRANSLATE TABLE
         TR    WORKHEX(8),0(R15)  CONVERT TO DISPLAY HEX
         MVC   MSG2_MOD2_SIZE,WORKHEX  MOVE TO DISPLAY FLD
*
         MVC   PRTLINE(MSG2_LEN),MSG2   MOVE ERROR MSG
         BAL   R11,PRINT
         MVC   RETURN_CODE,=H'8'
         B     COMPARE_MODS_END
*
FREE_WORK_AREAS  DS  0H
         L     R5,MOD1_SIZE       SIZE OF MOD1
         L     R2,AMODAREA        ADDR OF MOD
         FREEMAIN RU,LV=(R5),A=(R2)  FREE THE STORAGE
         L     R2,AMODSAVE        SIZE OF SAVED MOD
         FREEMAIN RU,LV=(R5),A=(R2)  FREE THE STORAGE
*
COMPARE_MODS_END  DS  0H
         L     R14,COMPARE_MODS_SAVE   LOAD RETURN ADDR
         BR    R14
*----------------------------------------------------------------------
EOF      DS    0H
ENDIT    DS    0H
         CLOSE (PDS1DCB,,PDS2DCB,,RPTDCB,,INPUTDCB)
         CLOSE SNAPDCB
EXIT     DS    0H
         LH    R15,RETURN_CODE
         L     R13,SAVE+4         CALLER'S SAVEAREA ADDR
         RETURN (14,12),RC=(15)   RELOAD REGS AND RETURN TO CALLER
*
PRINT    DS    0H
         PUT   RPTDCB,PRTLINE     PRINT A LINE
         MVI   PRTLINE,C' '       SPACE OUT...
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE  PRINT LINE
         BR    R11
*---------------------------------------------------------------------*
* DATA AREAS
*---------------------------------------------------------------------*
GETMEMS_SAVE  DS  F
COMPARE_SAVE  DS  F
NEXT_MEM1_SAVE  DS  F
NEXT_MEM2_SAVE  DS  F
COMPARE_MODS_SAVE  DS  F
AMOD1    DS    F
AMOD2    DS    F
MOD1_SIZE DS   F
MOD2_SIZE DS   F
MAXSIZE DC     A(5*1024*1024)  5 MEG  <===========================
AMODAREA DS    F
AMODSAVE DS    F
PARMLEN  DS    H
PARMTEXT DC    CL6' '
         DS    0D
HIVAL    DC    8X'FF'
         DS    0D
SNAPSTRT DC    C'SNAPSTRT'
SNAP_NUM DC    F'0'
MOD1_NAME DS   CL8
MOD2_NAME DS   CL8
SNAPEND  DC    C'SNAPEND '
RETURN_CODE  DC  F'0'
         DS    0D
BUFFER   DS    CL256
WORKHEX  DS    CL9
HEXTBL   DC    C'0123456789ABCDEF'  TRANSLATE TABLE FOR DISPLAY HEX
TRTTBL   DS    CL256              TRANSLATE TABLE FOR TRT INSTR.
FULLWORD DS    F
BIGGEST_SIZE DC  FL3'0'
*
MSG1     DC    C'XXX MODULE NAME IS INVALID.'
*
MSG2     EQU   *
         DC    C'MOD1='
MSG2_MOD1_NAME  DC  CL8' '
         DC    C', LEN IN LIB1='
MSG2_MOD1_SIZE DC  CL8' '
         DC    C'; MOD2='
MSG2_MOD2_NAME  DC  CL8' '
         DC    C', LEN IN LIB2='
MSG2_MOD2_SIZE DC  CL8' '
MSG2_LEN EQU   *-MSG2
*
MSG3     EQU   *
         DC    C'MOD1='
MSG3_MOD1_NAME DS   CL8
         DC    C', MOD2='
MSG3_MOD2_NAME DS   CL8
         DC    C'; MODULES ARE EQUAL.'
MSG3_LEN EQU   *-MSG3
*
MSG4     EQU   *
         DC    C'MOD1='
MSG4_MOD1_NAME DS   CL8
         DC    C', MOD2='
MSG4_MOD2_NAME DS   CL8
         DC    C'; MODULES ARE UNEQUAL AT OFFSET X'''
MSG4_OFFS DC    CL8' '
         DC    C''''
MSG4_LEN EQU   *-MSG4
*
MSG5     DC    C'        :  MODULE SIZE EXCEEDS WORKAREA'
*
MSG6     DC    C'INPUT MUST BEGIN IN COLUMN 1.'
*
MSG7     EQU   *
MSG7_MOD DS    CL8
         DC    C' IN LIB'
MSG7_LIB DS    C
         DC    C':  BLDL FAILED.'
MSG7_LEN EQU   *-MSG7
*
BLDL_LIST DS   0F
         DC    H'1'
BLDL_ENTRY1   DC    AL2(BLDL_ENTRY_LEN)
BLDL_NAME DC    CL8' '
         DC    XL58'00'
BLDL_ENTRY_LEN EQU   *-BLDL_ENTRY1
*
PRTLINE  DC    CL133' '
PDS1DCB  DCB   DSORG=PO,MACRF=R,DDNAME=LIB1  ,EODAD=EOD_LIB1
PDS2DCB  DCB   DSORG=PO,MACRF=R,DDNAME=LIB2  ,EODAD=EOD_LIB2
INPUTDCB DCB   DSORG=PS,RECFM=FB,DDNAME=INPUT,MACRF=GL,EODAD=EOF,      +
               LRECL=80  BLKSIZE=0
RPTDCB   DCB   DSORG=PS,RECFM=FB,DDNAME=REPORT,MACRF=PM,               +
               LRECL=133  BLKSIZE=0
SNAPDCB  DCB   DSORG=PS,RECFM=VBA,LRECL=125,BLKSIZE=1632,MACRF=W,      +
               DDNAME=SNAP
         LTORG
         IHAPDS PDSBLDL=YES
         END
